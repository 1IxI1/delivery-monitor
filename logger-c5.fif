// Dummy Logger Contract code
//
// It works mainly as v3r2 wallet, but:
// - without sending messages (i.e.
//   just sign verification,
//   valid_until check, seqno update).
// - it uses no c4, but ONLY ITS CODE
//   as a STORAGE for pubkey and seqno.
// 
// On each external_msg, it applies c5 from msg,
// which should have the set_code_action with code
// generated by this (logger-c5.fif) script.

#!/usr/bin/env fift -s
"Asm.fif" include

{ ."usage: " @' $0 type ." <seqno> <public_key>" cr
  ."Creates logger code cell with provided constant seqno (in code)." cr 1 halt
} : usage

$# 2 = { } { usage } cond

$1 (number) 1 <> abort"not an integer: check your seqno" =: seqno
$2 (number) 1 <> abort"not an integer: check your pubkey" =: pubkey

<{  SETCP0

    DUP IFNOTRET // return if recv_internal

    // "seqno" get-method
    DUP 85143 INT EQUAL
    IFJMP:<{ 
      DROP
      seqno INT
    }>

    // fail unless recv_external
    INC 32 THROWIF

    //
    // recv_external code:
    //

    // init stack: cs
    // (cs means cell slice)

    // load signature and backup body
    // (to check sign later)
    512 INT LDSLICEX DUP // signature body cs

    // load and check seqno
    32 LDU SWAP // signature body cs seqno
    seqno INT // signature body cs seqno stored_seqno
    EQUAL 82 THROWIFNOT  // signature body cs

    // check validity timeout
    48 LDU SWAP // signature body cs valid_until
    NOW // signature body cs valid_until now
    GEQ 77 THROWIFNOT // signature body cs

    // save c5 actions deep in stack
    PLDREF // signature body set_code_action
    -ROT // set_code_action signature body
    
    // check signature
    HASHSU SWAP // set_code_action msg_hash signature
    pubkey INT // set_code_action msg_hash signature pubkey
    CHKSIGNU 35 THROWIFNOT  // set_code_action

    // now we're left with set_code_action
    // done all checks - accept msg and update code
    ACCEPT // set_code_action
    c5 POP // none on stack - return
}>c

2 boc+>B
dup Bx. cr
"logger-code.boc" B>file

